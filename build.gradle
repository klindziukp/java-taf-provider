plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.flywaydb.flyway' version '8.2.3'
    id 'com.diffplug.spotless' version '6.21.0'
}

group = 'com.klindziuk.java.taf.provider'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    commonsIoVersion = '2.11.0'
    commonsLang3Version = '3.12.0'
    commonsTextVersion = '1.10.0'
    freemarkerVersion = '2.3.32'
    mapstructVersion = '1.5.3.Final'
    lombokMapstructBindingVersion = '0.2.0'
    commonModelVersion = '1.0.6-SNAPSHOT'
    hibernateValidatorVersion = '8.0.1.Final'
    springDocVersion = '2.2.0'
}

dependencies {
    compileOnly('org.projectlombok:lombok')
    annotationProcessor(
            'org.projectlombok:lombok',
            "org.mapstruct:mapstruct-processor:${mapstructVersion}",
            "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
    )
    implementation(
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-thymeleaf',
            'org.flywaydb:flyway-core',
            "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}",
            "org.hibernate:hibernate-validator:${hibernateValidatorVersion}",
            "org.mapstruct:mapstruct:${mapstructVersion}",
            "commons-io:commons-io:${commonsIoVersion}",
            "org.apache.commons:commons-lang3:${commonsLang3Version}",
            "org.apache.commons:commons-text:${commonsTextVersion}",
            "org.freemarker:freemarker:${freemarkerVersion}"
    )

    runtimeOnly('com.h2database:h2', 'org.postgresql:postgresql')
    compileOnly 'org.projectlombok:lombok'
    testImplementation(
            'org.springframework.boot:spring-boot-starter-test',
            'com.h2database:h2'
    )
}

bootBuildImage {
    builder = 'paketobuildpacks/builder:tiny'
    imageName = "${project.name}:${version}"
}

tasks.named('test') {
    useJUnitPlatform()
}

spotless {
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore'
        trimTrailingWhitespace()
        endWithNewline()
    }
    java {
        googleJavaFormat('1.17.0').reflowLongStrings()
        formatAnnotations()
        removeUnusedImports()
        licenseHeader '/*\n * Copyright (c) Dandelion development.\n */\n\n'
    }
}
